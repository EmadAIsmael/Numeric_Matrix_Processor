type: edu
custom_name: stage2
files:
- name: src/processor/Main.kt
  visible: true
  text: |
    package processor

    fun main() {
        println("Hello World!")
    }
  learner_created: false
- name: test/NumericMatrixProcessorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.SimpleTestCase;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.Arrays;
    import java.util.List;
    import java.util.stream.Collectors;

    public class NumericMatrixProcessorTest extends StageTest {

        @Override
        public List<TestCase> generate() {
            return Arrays.asList(
                new SimpleTestCase(
                    "3 3\n" +
                        "1 2 3\n" +
                        "4 5 6\n" +
                        "7 8 9\n" +
                        "3",
                    "3 6 9\n" +
                        "12 15 18\n" +
                        "21 24 27"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "2 3\n" +
                        "1 2 3\n" +
                        "4 5 6\n" +
                        "0",
                    "0 0 0\n" +
                        "0 0 0"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "5 5\n" +
                        "1 4 6 7 8\n" +
                        "1 9 5 2 2\n" +
                        "1 4 3 5 7\n" +
                        "1 4 6 4 1\n" +
                        "1 4 5 7 1\n" +
                        "5",
                    "5 20 30 35 40\n" +
                        "5 45 25 10 10\n" +
                        "5 20 15 25 35\n" +
                        "5 20 30 20 5\n" +
                        "5 20 25 35 5"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "1 1\n" +
                        "1\n" +
                        "1",
                    "1"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "1 1\n" +
                        "0\n" +
                        "1",
                    "0"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "3 2\n" +
                        "1 2\n" +
                        "8 1\n" +
                        "9 1\n" +
                        "10",
                    "10 20\n" +
                        "80 10\n" +
                        "90 10"
                ).setCheckFunc(this::checkSolved)
            );
        }

        private CheckResult checkSolved(String reply, String clue) {

            clue = clue.trim();
            reply = reply.trim();

            if (reply.equals(clue)) {
                return CheckResult.correct();
            }

            if (clue.equals("ERROR")) {
                return CheckResult.wrong("");
            }

            List<String> user = Arrays.asList(reply.trim().split("\n"));
            List<String> answ = Arrays.asList(clue.trim().split("\n"));

            if (user.size() != answ.size()) {
                return CheckResult.wrong("");
            }

            for (int i = 0; i < user.size(); i++) {
                String userLine = user.get(i).trim();
                String answLine = answ.get(i).trim();
                if (!userLine.equals(answLine)) {
                    return CheckResult.wrong("");
                }
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/processor/Matrix.kt
  visible: true
  text: |
    package processor


    class Matrix(private val rows: Int = 1, private val columns: Int = 1) {
        private val mat = Array(rows) { IntArray(columns) }

        constructor(arr: Array<IntArray>) : this(arr.size, arr[0].size) {
            for (r in 0 until rows)
                for (c in 0 until columns)
                    mat[r][c] = arr[r][c]
        }

       operator fun get(idx: Int): IntArray {
            return mat[idx]
        }

        operator fun plus(other: Matrix): Matrix {
            if (rows != other.rows && columns != other.columns)
                throw IncompatibleDimensionsForMatrixAdditionException(
                    "for mat addition / subtraction, number of rows and and columns " +
                            "of both matrices must be equal"
                )

            val m = Matrix(rows, columns)
            for (r in 0 until rows)
                for (c in 0 until columns)
                    m[r][c] = mat[r][c] + other[r][c]

            return m
        }

        fun transpose(): MutableList<MutableList<Int>> {
            val transpose = MutableList(columns) { MutableList(rows) { 0 } }
            for (r in 0 until rows)
                for (c in 0 until columns)
                    transpose[c][r] = mat[r][c]
            return transpose
        }

        override fun toString(): String {
            var output = ""
            for (r in 0 until rows) {
                for (c in 0 until columns)
                    output += "${mat[r][c]} "
                output += "\n"
            }

            return output
        }

        companion object {
            fun readMat(): Matrix {
                val (rows, cols) = readLine()!!.split(' ').map { it.toInt() }
                val m = Matrix(rows, cols)
                for (r in 0 until rows) {
                    val row = readLine()!!.split(' ').map { it.toInt() }
                    for (c in 0 until cols)
                        m[r][c] = row[c]
                }
                return m
            }
        }
    }

    class IncompatibleDimensionsForMatrixAdditionException(message: String) : Throwable()
  learner_created: true
feedback_link: https://hyperskill.org/projects/87/stages/481/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 06 Feb 2021 07:43:37 UTC
record: 2
